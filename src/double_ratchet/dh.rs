use rand::thread_rng;
use x25519_dalek::{PublicKey, SharedSecret, StaticSecret};

/// Diffie-Hellman key-pair generated by generate_dh function.
pub struct DHKeyPair {
    /// public key
    pub public_key: PublicKey,

    /// reusable private key (each private key is used exactly twice)
    pub private_key: StaticSecret,
}

/// Returns a new Diffie-Hellman key pair.
pub fn generate_dh() -> DHKeyPair {
    // Generate a random private key.
    let private_key = StaticSecret::random_from_rng(thread_rng());

    // Get the corresponding public key.
    let public_key = PublicKey::from(&private_key);
    DHKeyPair {
        public_key,
        private_key,
    }
}

/// Returns the output from the Diffie-Hellman calculation between the private key from the DH key pair
/// dh_pair and the DH public key dh_pub.
pub fn dh(dh_private: &StaticSecret, dh_pub: &PublicKey) -> SharedSecret {
    return dh_private.diffie_hellman(&dh_pub);
}
